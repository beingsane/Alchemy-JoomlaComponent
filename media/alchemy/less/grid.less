/** 
 *  FLAW{LESS} Css Framework 
 *
 *  grid.less
 *  The grid is the core component of the FLAW{LESS} Css Framework
 *  and provides extremely modular mixins that add specific functionality
 *  as needed to your project. This way the core remains as slim as you
 *  need it to, leaving all overhead aside.
 *  
 *  @author: Dominik Guzei
 *  @website: wizzart.at
 *
 *  MIT-License: http://www.opensource.org/licenses/mit-license.php
 */

/**
 *  .grid - MIXIN
 *  The core function of the grid module, that builds up
 *  the basic structure and provides you with up to 24
 *  columns with custom gap, min-width and max-width 
 *
 *  it's also the setup function for all other grid
 *  modules. So you can define most presets in one
 *  mixin call.
 *  
 *  @width   - defines the width of the grid in (any css unit)
 *  @columns - specifies the number of columns in the grid
 *             up to 24 columns are possible. (plane number)
 *  @gap     - The gap between elements in the grid (any css unit)
 *  @min     - minimal width of the grid (any css unit)
 *  @max     - maximal width of the grid (any css unit)
 *  @align   - align the grid on left / center / right side of parent
 */

.grid_setup(@width: @grid_width,
      @columns: @grid_columns,
      @gap: @grid_gap,
      @align: @grid_align,
      @min: @grid_min_width, 
      @max: @grid_max_width) 
{
  /* mix the params into the element as variables
   * so that other modules can take them as defaults */
   
  @grid_width: @width;
  @grid_columns: @columns;
  @grid_gap: @gap;
  @grid_align: @align;
  @grid_min_width: @min;
  @grid_max_width: @max;    
  
  body {
    text-align: @grid_align;
  }
}

.grid(@width: @grid_width,
      @columns: @grid_columns,
      @gap: @grid_gap,
      @align: @grid_align,
      @min: @grid_min_width, 
      @max: @grid_max_width) {

  @grid_width: @width;
  @grid_columns: @columns;
  @grid_gap: @gap;
  @grid_align: @align;
  @grid_min_width: @min;
  @grid_max_width: @max;

  width: @grid_width;
  min-width: @grid_min_width;
  max-width: @grid_max_width;            
  margin: 0 auto;
  text-align: left;
  
  /* CLEARFIX MIXIN */
  .wrap,
  .in {
    .clear_fix();
  }
  
  .clear_fix();
}

.grid_left() {
	float: left;
}

.grid_right() {
	margin-left: -5px;
	float: right;	
}

.grid_gap_left() {
	> .in {
      margin-right: 0;
      margin-left: @grid_gap / 2;  
  	}	
}

.grid_gap_right() {
	> .in {
      margin-right: @grid_gap / 2;
      margin-left: 0;  
  	}	
}

.grid_gap_both() {
	> .in {
      margin-right: @grid_gap / 2;
      margin-left: @grid_gap / 2;  
  	}	
}

.grid_gap_none() {
	> .in {
      margin-right: 0;
      margin-left: 0;  
  	}	
}

/* ie fixes for grid component */

.ie .in {
	word-wrap: break-word; overflow-x: hidden;
	height: 1%;
}

/**
 *  .appendWidth - MIXIN
 *  See: .spanWidth
 *  adds the with of @number cells to the right margin
 *  and thus moves the element to the left side
 */

.grid_append(@count) {
	margin-right: grid_calculatewidth(@count, @grid_width, @grid_columns);
}

.grid_unappend() {
	margin-right: 0;	
}

.grid_col_wrap() {
	.clear_fix();
    width: 100%;
	position:relative;
}

.grid_col_left(@left) {
	width: @left;
    float:left;
}

.grid_col_right(@right) {
	width: @right;
    float:right;
}

.grid_col_center(@left, @right) {
	width: auto;
    margin: 0 @right 0 @left;
}

.grid_no_col() {
	margin: 0;	
}

.grid_col_equal_wrap() {
	overflow: hidden; 
    display:block;
	position:relative;
}

.grid_col_equal() {
	padding-bottom:32767px;
    margin-bottom:-32767px;	
}

.grid_col_equal_remove() {
	padding-bottom: 0;
	margin-bottom: 0;
}

.grid_columns_table() {
   overflow:visible; 
   display:table; 
   table-layout:fixed;

   > div {
    display:table-cell;
    float:none; 
    margin:0; 
    overflow:hidden;
    vertical-align:top;
  }
}

.grid_fixed(@width: 200px) {
	width: @width;
}

.grid_fluid(@width: 25%) {
  width: @width;
}

/**
 *  .prependWidth - MIXIN
 *  See: .prependWidth
 *  adds the with of @number cells to the right margin
 *  and thus moves the element to the left side
 */

.grid_prepend(@count) {
	margin-left: grid_calculatewidth(@count, @grid_width, @grid_columns);	
}

.grid_unprepend() {
	margin-left: 0;	
}

.grid_pull(@number, @height: @grid_vertical_rhythm, @size: @grid_font_size) {
	@step: 1em * @height / @size;
	margin-top: @step * @number;	
}

.grid_push(@number, @height: @grid_vertical_rhythm, @size: @grid_font_size) {
	@step: 1em * @height / @size;
	margin-bottom: @step * @number;	
}

.grid_rise(@number, @height: @grid_vertical_rhythm, @size: @grid_font_size) {
	@step: 1em * @height / @size;
	margin-top: -1 * @step * @number;	
}

/**
 *  .prependWidth - MIXIN
 *  See: .prependWidth
 *  adds the with of @number cells to the right margin
 *  and thus moves the element to the left side
 */

.grid_shift_left(@count) {
  right: grid_calculatewidth(@count, @grid_width, @grid_columns);
  position:relative;
}

/**
 *  .prependWidth - MIXIN
 *  See: .prependWidth
 *  adds the with of @number cells to the right margin
 *  and thus moves the element to the left side
 */

.grid_shift_right(@count) {
  left: grid_calculatewidth(@count, @grid_width, @grid_columns);
  position:relative;
}

.grid_unshift() {
	left: 0;
	right: 0;	
}

.grid_sink(@number, @height: @grid_vertical_rhythm, @size: @grid_font_size) {
	@step: 1em * @height / @size;
	margin-bottom: -1 * @step * @number;	
}

/**
 *  .spanWidth - MIXIN
 *  Utility mixin used by the framework to calculate the
 *  width of @number cells in the grid and add it to the calling
 *  element. It distinguishes between relative (%) and absolute
 *  units (px, em) for the calculation. This way you can use
 *  any units for your grid.
 */

.grid_span(@count) {
	width: grid_calculatewidth(@count, @grid_width, @grid_columns);	
}
